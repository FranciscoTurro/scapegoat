generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model Card {
  id               String      @id
  name             String
  type             String
  desc             String
  atk              Int?
  def              Int?
  level            Int?
  linkval          Int?
  attribute        Attributes?
  race             Types
  full_image_path  String
  small_image_path String
  Negates          Negation[]  @relation("negatingCard")
  NegatedBy        Negation[]  @relation("negatedCard")
  Deck             Deck[]
}

model Negation {
  id             String @id @default(cuid())
  negatingCard   Card   @relation("negatingCard", fields: [negatingCardId], references: [id])
  negatingCardId String
  negatedCard    Card   @relation("negatedCard", fields: [negatedCardId], references: [id])
  negatedCardId  String
  priority       Int
  deck           Deck   @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId         String
}

model Deck {
  id          String     @id @default(cuid())
  name        String
  cover_card  Card       @relation(fields: [coverCardId], references: [id])
  coverCardId String
  Negations   Negation[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(user)
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  admin
  user
}

enum Attributes {
  DARK
  LIGHT
  FIRE
  WATER
  EARTH
  WIND
  DIVINE
}

enum Types {
  Aqua
  Beast
  Beast_Warrior
  Continuous
  Counter
  Creator_God
  Cyberse
  Dinosaur
  Divine_Beast
  Dragon
  Equip
  Fairy
  Field
  Fiend
  Fish
  Insect
  Machine
  Normal
  Plant
  Psychic
  Pyro
  Quick_Play
  Reptile
  Ritual
  Rock
  Sea_Serpent
  Spellcaster
  Thunder
  Warrior
  Winged_Beast
  Wyrm
  Zombie
}
